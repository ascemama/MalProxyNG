// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: malproxy.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Malproxy {

  /// <summary>Holder for reflection information generated from malproxy.proto</summary>
  public static partial class MalproxyReflection {

    #region Descriptor
    /// <summary>File descriptor for malproxy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MalproxyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tYWxwcm94eS5wcm90bxIIbWFscHJveHkiNwoPSW5pdEluZm9ybWF0aW9u",
            "EiQKCHBsYXRmb3JtGAEgASgOMhIubWFscHJveHkuUGxhdGZvcm0iHAoKSGFu",
            "ZGxlVHlwZRIOCgZoYW5kbGUYASABKAQiJgoSTG9hZExpYnJhcnlSZXF1ZXN0",
            "EhAKCGRsbF9uYW1lGAEgASgJIjsKE0xvYWRMaWJyYXJ5UmVzcG9uc2USJAoG",
            "aGFuZGxlGAEgASgLMhQubWFscHJveHkuSGFuZGxlVHlwZSJkCg9DYWxsRnVu",
            "Y1JlcXVlc3QSEAoIZGxsX25hbWUYASABKAkSFQoNZnVuY3Rpb25fbmFtZRgC",
            "IAEoCRIoCgxpbl9hcmd1bWVudHMYAyADKAsyEi5tYWxwcm94eS5Bcmd1bWVu",
            "dCJCCg5CdWZmZXJBcmd1bWVudBIMCgRkYXRhGAEgASgMEiIKBHR5cGUYAiAB",
            "KA4yFC5tYWxwcm94eS5CdWZmZXJUeXBlIoQCCghBcmd1bWVudBITCglpbnQz",
            "Ml92YWwYASABKAVIABIUCgp1aW50MzJfdmFsGAIgASgNSAASEwoJaW50NjRf",
            "dmFsGAMgASgDSAASFAoKdWludDY0X3ZhbBgEIAEoBEgAEhQKCnN0cmluZ192",
            "YWwYBSABKAlIABIVCgt3c3RyaW5nX3ZhbBgGIAEoDEgAEhIKCGJvb2xfdmFs",
            "GAcgASgISAASLgoKYnVmZmVyX3ZhbBgIIAEoCzIYLm1hbHByb3h5LkJ1ZmZl",
            "ckFyZ3VtZW50SAASKgoKaGFuZGxlX3ZhbBgJIAEoCzIULm1hbHByb3h5Lkhh",
            "bmRsZVR5cGVIAEIFCgNhcmciZwoQQ2FsbEZ1bmNSZXNwb25zZRIoCgxyZXR1",
            "cm5fdmFsdWUYASABKAsyEi5tYWxwcm94eS5Bcmd1bWVudBIpCg1vdXRfYXJn",
            "dW1lbnRzGAIgAygLMhIubWFscHJveHkuQXJndW1lbnQqMAoIUGxhdGZvcm0S",
            "EgoOUGxhdGZvcm1fV2luMzIQABIQCgxQbGF0Zm9ybV94NjQQASpMCgpCdWZm",
            "ZXJUeXBlEh4KGkJ1ZmZlclR5cGVfQ2xpZW50QWxsb2NhdGVkEAASHgoaQnVm",
            "ZmVyVHlwZV9TZXJ2ZXJBbGxvY2F0ZWQQATLyAQoRTWFscHJveHlJbnRlcmZh",
            "Y2USRAoKSW5pdGlhbGl6ZRIZLm1hbHByb3h5LkluaXRJbmZvcm1hdGlvbhoZ",
            "Lm1hbHByb3h5LkluaXRJbmZvcm1hdGlvbiIAElIKEUxvYWRSZW1vdGVMaWJy",
            "YXJ5EhwubWFscHJveHkuTG9hZExpYnJhcnlSZXF1ZXN0Gh0ubWFscHJveHku",
            "TG9hZExpYnJhcnlSZXNwb25zZSIAEkMKCENhbGxGdW5jEhkubWFscHJveHku",
            "Q2FsbEZ1bmNSZXF1ZXN0GhoubWFscHJveHkuQ2FsbEZ1bmNSZXNwb25zZSIA",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Malproxy.Platform), typeof(global::Malproxy.BufferType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Malproxy.InitInformation), global::Malproxy.InitInformation.Parser, new[]{ "Platform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Malproxy.HandleType), global::Malproxy.HandleType.Parser, new[]{ "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Malproxy.LoadLibraryRequest), global::Malproxy.LoadLibraryRequest.Parser, new[]{ "DllName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Malproxy.LoadLibraryResponse), global::Malproxy.LoadLibraryResponse.Parser, new[]{ "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Malproxy.CallFuncRequest), global::Malproxy.CallFuncRequest.Parser, new[]{ "DllName", "FunctionName", "InArguments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Malproxy.BufferArgument), global::Malproxy.BufferArgument.Parser, new[]{ "Data", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Malproxy.Argument), global::Malproxy.Argument.Parser, new[]{ "Int32Val", "Uint32Val", "Int64Val", "Uint64Val", "StringVal", "WstringVal", "BoolVal", "BufferVal", "HandleVal" }, new[]{ "Arg" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Malproxy.CallFuncResponse), global::Malproxy.CallFuncResponse.Parser, new[]{ "ReturnValue", "OutArguments" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Platform {
    [pbr::OriginalName("Platform_Win32")] Win32 = 0,
    [pbr::OriginalName("Platform_x64")] X64 = 1,
  }

  public enum BufferType {
    [pbr::OriginalName("BufferType_ClientAllocated")] ClientAllocated = 0,
    [pbr::OriginalName("BufferType_ServerAllocated")] ServerAllocated = 1,
  }

  #endregion

  #region Messages
  public sealed partial class InitInformation : pb::IMessage<InitInformation> {
    private static readonly pb::MessageParser<InitInformation> _parser = new pb::MessageParser<InitInformation>(() => new InitInformation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Malproxy.MalproxyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitInformation(InitInformation other) : this() {
      platform_ = other.platform_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitInformation Clone() {
      return new InitInformation(this);
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 1;
    private global::Malproxy.Platform platform_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Malproxy.Platform Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Platform != other.Platform) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Platform != 0) hash ^= Platform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Platform != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Platform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Platform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Platform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitInformation other) {
      if (other == null) {
        return;
      }
      if (other.Platform != 0) {
        Platform = other.Platform;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            platform_ = (global::Malproxy.Platform) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HandleType : pb::IMessage<HandleType> {
    private static readonly pb::MessageParser<HandleType> _parser = new pb::MessageParser<HandleType>(() => new HandleType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HandleType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Malproxy.MalproxyReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandleType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandleType(HandleType other) : this() {
      handle_ = other.handle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HandleType Clone() {
      return new HandleType(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HandleType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HandleType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Handle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Handle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HandleType other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Handle = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoadLibraryRequest : pb::IMessage<LoadLibraryRequest> {
    private static readonly pb::MessageParser<LoadLibraryRequest> _parser = new pb::MessageParser<LoadLibraryRequest>(() => new LoadLibraryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadLibraryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Malproxy.MalproxyReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadLibraryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadLibraryRequest(LoadLibraryRequest other) : this() {
      dllName_ = other.dllName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadLibraryRequest Clone() {
      return new LoadLibraryRequest(this);
    }

    /// <summary>Field number for the "dll_name" field.</summary>
    public const int DllNameFieldNumber = 1;
    private string dllName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DllName {
      get { return dllName_; }
      set {
        dllName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadLibraryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadLibraryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DllName != other.DllName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DllName.Length != 0) hash ^= DllName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DllName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DllName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DllName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DllName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadLibraryRequest other) {
      if (other == null) {
        return;
      }
      if (other.DllName.Length != 0) {
        DllName = other.DllName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DllName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoadLibraryResponse : pb::IMessage<LoadLibraryResponse> {
    private static readonly pb::MessageParser<LoadLibraryResponse> _parser = new pb::MessageParser<LoadLibraryResponse>(() => new LoadLibraryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadLibraryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Malproxy.MalproxyReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadLibraryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadLibraryResponse(LoadLibraryResponse other) : this() {
      handle_ = other.handle_ != null ? other.handle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadLibraryResponse Clone() {
      return new LoadLibraryResponse(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private global::Malproxy.HandleType handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Malproxy.HandleType Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadLibraryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadLibraryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Handle, other.Handle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (handle_ != null) hash ^= Handle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (handle_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Handle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (handle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Handle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadLibraryResponse other) {
      if (other == null) {
        return;
      }
      if (other.handle_ != null) {
        if (handle_ == null) {
          handle_ = new global::Malproxy.HandleType();
        }
        Handle.MergeFrom(other.Handle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (handle_ == null) {
              handle_ = new global::Malproxy.HandleType();
            }
            input.ReadMessage(handle_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CallFuncRequest : pb::IMessage<CallFuncRequest> {
    private static readonly pb::MessageParser<CallFuncRequest> _parser = new pb::MessageParser<CallFuncRequest>(() => new CallFuncRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallFuncRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Malproxy.MalproxyReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFuncRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFuncRequest(CallFuncRequest other) : this() {
      dllName_ = other.dllName_;
      functionName_ = other.functionName_;
      inArguments_ = other.inArguments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFuncRequest Clone() {
      return new CallFuncRequest(this);
    }

    /// <summary>Field number for the "dll_name" field.</summary>
    public const int DllNameFieldNumber = 1;
    private string dllName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DllName {
      get { return dllName_; }
      set {
        dllName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "function_name" field.</summary>
    public const int FunctionNameFieldNumber = 2;
    private string functionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FunctionName {
      get { return functionName_; }
      set {
        functionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "in_arguments" field.</summary>
    public const int InArgumentsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Malproxy.Argument> _repeated_inArguments_codec
        = pb::FieldCodec.ForMessage(26, global::Malproxy.Argument.Parser);
    private readonly pbc::RepeatedField<global::Malproxy.Argument> inArguments_ = new pbc::RepeatedField<global::Malproxy.Argument>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Malproxy.Argument> InArguments {
      get { return inArguments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallFuncRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallFuncRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DllName != other.DllName) return false;
      if (FunctionName != other.FunctionName) return false;
      if(!inArguments_.Equals(other.inArguments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DllName.Length != 0) hash ^= DllName.GetHashCode();
      if (FunctionName.Length != 0) hash ^= FunctionName.GetHashCode();
      hash ^= inArguments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DllName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DllName);
      }
      if (FunctionName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FunctionName);
      }
      inArguments_.WriteTo(output, _repeated_inArguments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DllName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DllName);
      }
      if (FunctionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FunctionName);
      }
      size += inArguments_.CalculateSize(_repeated_inArguments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallFuncRequest other) {
      if (other == null) {
        return;
      }
      if (other.DllName.Length != 0) {
        DllName = other.DllName;
      }
      if (other.FunctionName.Length != 0) {
        FunctionName = other.FunctionName;
      }
      inArguments_.Add(other.inArguments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DllName = input.ReadString();
            break;
          }
          case 18: {
            FunctionName = input.ReadString();
            break;
          }
          case 26: {
            inArguments_.AddEntriesFrom(input, _repeated_inArguments_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BufferArgument : pb::IMessage<BufferArgument> {
    private static readonly pb::MessageParser<BufferArgument> _parser = new pb::MessageParser<BufferArgument>(() => new BufferArgument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BufferArgument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Malproxy.MalproxyReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferArgument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferArgument(BufferArgument other) : this() {
      data_ = other.data_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferArgument Clone() {
      return new BufferArgument(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Malproxy.BufferType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Malproxy.BufferType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BufferArgument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BufferArgument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BufferArgument other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
          case 16: {
            type_ = (global::Malproxy.BufferType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Argument : pb::IMessage<Argument> {
    private static readonly pb::MessageParser<Argument> _parser = new pb::MessageParser<Argument>(() => new Argument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Argument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Malproxy.MalproxyReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Argument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Argument(Argument other) : this() {
      switch (other.ArgCase) {
        case ArgOneofCase.Int32Val:
          Int32Val = other.Int32Val;
          break;
        case ArgOneofCase.Uint32Val:
          Uint32Val = other.Uint32Val;
          break;
        case ArgOneofCase.Int64Val:
          Int64Val = other.Int64Val;
          break;
        case ArgOneofCase.Uint64Val:
          Uint64Val = other.Uint64Val;
          break;
        case ArgOneofCase.StringVal:
          StringVal = other.StringVal;
          break;
        case ArgOneofCase.WstringVal:
          WstringVal = other.WstringVal;
          break;
        case ArgOneofCase.BoolVal:
          BoolVal = other.BoolVal;
          break;
        case ArgOneofCase.BufferVal:
          BufferVal = other.BufferVal.Clone();
          break;
        case ArgOneofCase.HandleVal:
          HandleVal = other.HandleVal.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Argument Clone() {
      return new Argument(this);
    }

    /// <summary>Field number for the "int32_val" field.</summary>
    public const int Int32ValFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Int32Val {
      get { return argCase_ == ArgOneofCase.Int32Val ? (int) arg_ : 0; }
      set {
        arg_ = value;
        argCase_ = ArgOneofCase.Int32Val;
      }
    }

    /// <summary>Field number for the "uint32_val" field.</summary>
    public const int Uint32ValFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uint32Val {
      get { return argCase_ == ArgOneofCase.Uint32Val ? (uint) arg_ : 0; }
      set {
        arg_ = value;
        argCase_ = ArgOneofCase.Uint32Val;
      }
    }

    /// <summary>Field number for the "int64_val" field.</summary>
    public const int Int64ValFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64Val {
      get { return argCase_ == ArgOneofCase.Int64Val ? (long) arg_ : 0L; }
      set {
        arg_ = value;
        argCase_ = ArgOneofCase.Int64Val;
      }
    }

    /// <summary>Field number for the "uint64_val" field.</summary>
    public const int Uint64ValFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uint64Val {
      get { return argCase_ == ArgOneofCase.Uint64Val ? (ulong) arg_ : 0UL; }
      set {
        arg_ = value;
        argCase_ = ArgOneofCase.Uint64Val;
      }
    }

    /// <summary>Field number for the "string_val" field.</summary>
    public const int StringValFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringVal {
      get { return argCase_ == ArgOneofCase.StringVal ? (string) arg_ : ""; }
      set {
        arg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        argCase_ = ArgOneofCase.StringVal;
      }
    }

    /// <summary>Field number for the "wstring_val" field.</summary>
    public const int WstringValFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString WstringVal {
      get { return argCase_ == ArgOneofCase.WstringVal ? (pb::ByteString) arg_ : pb::ByteString.Empty; }
      set {
        arg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        argCase_ = ArgOneofCase.WstringVal;
      }
    }

    /// <summary>Field number for the "bool_val" field.</summary>
    public const int BoolValFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolVal {
      get { return argCase_ == ArgOneofCase.BoolVal ? (bool) arg_ : false; }
      set {
        arg_ = value;
        argCase_ = ArgOneofCase.BoolVal;
      }
    }

    /// <summary>Field number for the "buffer_val" field.</summary>
    public const int BufferValFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Malproxy.BufferArgument BufferVal {
      get { return argCase_ == ArgOneofCase.BufferVal ? (global::Malproxy.BufferArgument) arg_ : null; }
      set {
        arg_ = value;
        argCase_ = value == null ? ArgOneofCase.None : ArgOneofCase.BufferVal;
      }
    }

    /// <summary>Field number for the "handle_val" field.</summary>
    public const int HandleValFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Malproxy.HandleType HandleVal {
      get { return argCase_ == ArgOneofCase.HandleVal ? (global::Malproxy.HandleType) arg_ : null; }
      set {
        arg_ = value;
        argCase_ = value == null ? ArgOneofCase.None : ArgOneofCase.HandleVal;
      }
    }

    private object arg_;
    /// <summary>Enum of possible cases for the "arg" oneof.</summary>
    public enum ArgOneofCase {
      None = 0,
      Int32Val = 1,
      Uint32Val = 2,
      Int64Val = 3,
      Uint64Val = 4,
      StringVal = 5,
      WstringVal = 6,
      BoolVal = 7,
      BufferVal = 8,
      HandleVal = 9,
    }
    private ArgOneofCase argCase_ = ArgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArgOneofCase ArgCase {
      get { return argCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearArg() {
      argCase_ = ArgOneofCase.None;
      arg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Argument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Argument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Int32Val != other.Int32Val) return false;
      if (Uint32Val != other.Uint32Val) return false;
      if (Int64Val != other.Int64Val) return false;
      if (Uint64Val != other.Uint64Val) return false;
      if (StringVal != other.StringVal) return false;
      if (WstringVal != other.WstringVal) return false;
      if (BoolVal != other.BoolVal) return false;
      if (!object.Equals(BufferVal, other.BufferVal)) return false;
      if (!object.Equals(HandleVal, other.HandleVal)) return false;
      if (ArgCase != other.ArgCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (argCase_ == ArgOneofCase.Int32Val) hash ^= Int32Val.GetHashCode();
      if (argCase_ == ArgOneofCase.Uint32Val) hash ^= Uint32Val.GetHashCode();
      if (argCase_ == ArgOneofCase.Int64Val) hash ^= Int64Val.GetHashCode();
      if (argCase_ == ArgOneofCase.Uint64Val) hash ^= Uint64Val.GetHashCode();
      if (argCase_ == ArgOneofCase.StringVal) hash ^= StringVal.GetHashCode();
      if (argCase_ == ArgOneofCase.WstringVal) hash ^= WstringVal.GetHashCode();
      if (argCase_ == ArgOneofCase.BoolVal) hash ^= BoolVal.GetHashCode();
      if (argCase_ == ArgOneofCase.BufferVal) hash ^= BufferVal.GetHashCode();
      if (argCase_ == ArgOneofCase.HandleVal) hash ^= HandleVal.GetHashCode();
      hash ^= (int) argCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (argCase_ == ArgOneofCase.Int32Val) {
        output.WriteRawTag(8);
        output.WriteInt32(Int32Val);
      }
      if (argCase_ == ArgOneofCase.Uint32Val) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uint32Val);
      }
      if (argCase_ == ArgOneofCase.Int64Val) {
        output.WriteRawTag(24);
        output.WriteInt64(Int64Val);
      }
      if (argCase_ == ArgOneofCase.Uint64Val) {
        output.WriteRawTag(32);
        output.WriteUInt64(Uint64Val);
      }
      if (argCase_ == ArgOneofCase.StringVal) {
        output.WriteRawTag(42);
        output.WriteString(StringVal);
      }
      if (argCase_ == ArgOneofCase.WstringVal) {
        output.WriteRawTag(50);
        output.WriteBytes(WstringVal);
      }
      if (argCase_ == ArgOneofCase.BoolVal) {
        output.WriteRawTag(56);
        output.WriteBool(BoolVal);
      }
      if (argCase_ == ArgOneofCase.BufferVal) {
        output.WriteRawTag(66);
        output.WriteMessage(BufferVal);
      }
      if (argCase_ == ArgOneofCase.HandleVal) {
        output.WriteRawTag(74);
        output.WriteMessage(HandleVal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (argCase_ == ArgOneofCase.Int32Val) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Int32Val);
      }
      if (argCase_ == ArgOneofCase.Uint32Val) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32Val);
      }
      if (argCase_ == ArgOneofCase.Int64Val) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Int64Val);
      }
      if (argCase_ == ArgOneofCase.Uint64Val) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uint64Val);
      }
      if (argCase_ == ArgOneofCase.StringVal) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringVal);
      }
      if (argCase_ == ArgOneofCase.WstringVal) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(WstringVal);
      }
      if (argCase_ == ArgOneofCase.BoolVal) {
        size += 1 + 1;
      }
      if (argCase_ == ArgOneofCase.BufferVal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BufferVal);
      }
      if (argCase_ == ArgOneofCase.HandleVal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandleVal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Argument other) {
      if (other == null) {
        return;
      }
      switch (other.ArgCase) {
        case ArgOneofCase.Int32Val:
          Int32Val = other.Int32Val;
          break;
        case ArgOneofCase.Uint32Val:
          Uint32Val = other.Uint32Val;
          break;
        case ArgOneofCase.Int64Val:
          Int64Val = other.Int64Val;
          break;
        case ArgOneofCase.Uint64Val:
          Uint64Val = other.Uint64Val;
          break;
        case ArgOneofCase.StringVal:
          StringVal = other.StringVal;
          break;
        case ArgOneofCase.WstringVal:
          WstringVal = other.WstringVal;
          break;
        case ArgOneofCase.BoolVal:
          BoolVal = other.BoolVal;
          break;
        case ArgOneofCase.BufferVal:
          if (BufferVal == null) {
            BufferVal = new global::Malproxy.BufferArgument();
          }
          BufferVal.MergeFrom(other.BufferVal);
          break;
        case ArgOneofCase.HandleVal:
          if (HandleVal == null) {
            HandleVal = new global::Malproxy.HandleType();
          }
          HandleVal.MergeFrom(other.HandleVal);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Int32Val = input.ReadInt32();
            break;
          }
          case 16: {
            Uint32Val = input.ReadUInt32();
            break;
          }
          case 24: {
            Int64Val = input.ReadInt64();
            break;
          }
          case 32: {
            Uint64Val = input.ReadUInt64();
            break;
          }
          case 42: {
            StringVal = input.ReadString();
            break;
          }
          case 50: {
            WstringVal = input.ReadBytes();
            break;
          }
          case 56: {
            BoolVal = input.ReadBool();
            break;
          }
          case 66: {
            global::Malproxy.BufferArgument subBuilder = new global::Malproxy.BufferArgument();
            if (argCase_ == ArgOneofCase.BufferVal) {
              subBuilder.MergeFrom(BufferVal);
            }
            input.ReadMessage(subBuilder);
            BufferVal = subBuilder;
            break;
          }
          case 74: {
            global::Malproxy.HandleType subBuilder = new global::Malproxy.HandleType();
            if (argCase_ == ArgOneofCase.HandleVal) {
              subBuilder.MergeFrom(HandleVal);
            }
            input.ReadMessage(subBuilder);
            HandleVal = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CallFuncResponse : pb::IMessage<CallFuncResponse> {
    private static readonly pb::MessageParser<CallFuncResponse> _parser = new pb::MessageParser<CallFuncResponse>(() => new CallFuncResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallFuncResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Malproxy.MalproxyReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFuncResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFuncResponse(CallFuncResponse other) : this() {
      returnValue_ = other.returnValue_ != null ? other.returnValue_.Clone() : null;
      outArguments_ = other.outArguments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFuncResponse Clone() {
      return new CallFuncResponse(this);
    }

    /// <summary>Field number for the "return_value" field.</summary>
    public const int ReturnValueFieldNumber = 1;
    private global::Malproxy.Argument returnValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Malproxy.Argument ReturnValue {
      get { return returnValue_; }
      set {
        returnValue_ = value;
      }
    }

    /// <summary>Field number for the "out_arguments" field.</summary>
    public const int OutArgumentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Malproxy.Argument> _repeated_outArguments_codec
        = pb::FieldCodec.ForMessage(18, global::Malproxy.Argument.Parser);
    private readonly pbc::RepeatedField<global::Malproxy.Argument> outArguments_ = new pbc::RepeatedField<global::Malproxy.Argument>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Malproxy.Argument> OutArguments {
      get { return outArguments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallFuncResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallFuncResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReturnValue, other.ReturnValue)) return false;
      if(!outArguments_.Equals(other.outArguments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (returnValue_ != null) hash ^= ReturnValue.GetHashCode();
      hash ^= outArguments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (returnValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReturnValue);
      }
      outArguments_.WriteTo(output, _repeated_outArguments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (returnValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReturnValue);
      }
      size += outArguments_.CalculateSize(_repeated_outArguments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallFuncResponse other) {
      if (other == null) {
        return;
      }
      if (other.returnValue_ != null) {
        if (returnValue_ == null) {
          returnValue_ = new global::Malproxy.Argument();
        }
        ReturnValue.MergeFrom(other.ReturnValue);
      }
      outArguments_.Add(other.outArguments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (returnValue_ == null) {
              returnValue_ = new global::Malproxy.Argument();
            }
            input.ReadMessage(returnValue_);
            break;
          }
          case 18: {
            outArguments_.AddEntriesFrom(input, _repeated_outArguments_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
