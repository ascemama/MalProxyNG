#include "RpcLib/MalproxySession.h"
#include "Framework/Utils.h"
#include "Framework/NtHelper.h"
#include <Windows.h>
#include "MalproxyClient/MalproxyClientRunner.h"

#define DllExport   __declspec( dllexport )


HANDLE WINAPI Malproxy_CreateFileW(
    MalproxySession* client
    , wchar_t* lpFileName
    , DWORD dwDesiredAccess
    , DWORD dwShareMode
    , LPVOID lpSecurityAttributes
    , DWORD dwCreationDisposition
    , DWORD dwFlagsAndAttributes
    , HANDLE hTemplateFile
) {
    if (lpSecurityAttributes != nullptr) THROW("lpSecurityAttributes must be nullptr");
    malproxy::CallFuncRequest request;
    request.set_dll_name("kernel32.dll");
    request.set_function_name("CreateFileW");

    malproxy::Argument* arg_lpFileName = request.add_in_arguments();
    arg_lpFileName->set_wstring_val(StringUtils::Utf16ToUtf8(lpFileName));

    malproxy::Argument* arg_dwDesiredAccess = request.add_in_arguments();
    arg_dwDesiredAccess->set_uint32_val((DWORD)dwDesiredAccess);
    malproxy::Argument* arg_dwShareMode = request.add_in_arguments();
    arg_dwShareMode->set_uint32_val((DWORD)dwShareMode);
    malproxy::Argument* arg_lpSecurityAttributes = request.add_in_arguments();
    arg_lpSecurityAttributes->set_empty_val((LPVOID)true);
    malproxy::Argument* arg_dwCreationDisposition = request.add_in_arguments();
    arg_dwCreationDisposition->set_uint32_val((DWORD)dwCreationDisposition);
    malproxy::Argument* arg_dwFlagsAndAttributes = request.add_in_arguments();
    arg_dwFlagsAndAttributes->set_uint32_val((DWORD)dwFlagsAndAttributes);
    malproxy::Argument* arg_hTemplateFile = request.add_in_arguments();
    std::unique_ptr<malproxy::HandleType> handle_hTemplateFile = std::make_unique<malproxy::HandleType>();
    handle_hTemplateFile->set_handle((uint64_t)hTemplateFile);
    arg_hTemplateFile->set_allocated_handle_val(handle_hTemplateFile.release());


    auto response = client->CallFunc(request);
    return (HANDLE)response.return_value().handle_val().handle();
}

DllExport HANDLE WINAPI CreateFileW_stub(
    wchar_t* lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPVOID lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile
) {
    return Malproxy_CreateFileW(MalproxyClientRunner::Instance().Session().get()
        , lpFileName
        , dwDesiredAccess
        , dwShareMode
        , lpSecurityAttributes
        , dwCreationDisposition
        , dwFlagsAndAttributes
        , hTemplateFile
    );
}


std::map<std::string, std::map<std::string, FARPROC>> autogenerated_stubs = {
{
"kernel32.dll",
{
{ "CreateFileW", (FARPROC)CreateFileW_stub },
}
}
};
